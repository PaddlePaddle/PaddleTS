# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, PaddleTS
# This file is distributed under the same license as the PaddleTS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: PaddleTS \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-25 11:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/api/paddlets.pipeline.pipeline.rst:2
#: b0e80cc80aaa4e3e8f8392504ea84541
msgid "paddlets.pipeline.pipeline"
msgstr ""

#: 082a804a03a748f49b14f9284af0abb5 of paddlets.pipeline.pipeline.Pipeline:1
msgid "Bases: :py:class:`~paddlets.models.base.Trainable`"
msgstr ""

#: b2ad872d6f8d4a1282e04b1424858ea2 of paddlets.pipeline.pipeline.Pipeline:1
msgid ""
"The pipeline is designed to build a workflow for time series modeling "
"which may be comprised of a set of transformers and an model."
msgstr "`Pipeline` 被用于构建一个时序建模机器学习工作流，它可以包含若干个特征工程方法与一个学习器。"

#: 81ef812f2fa64a1e9d286db8c62372f5 of paddlets.pipeline.pipeline.Pipeline:4
msgid "**Note**: The model is optional."
msgstr "**注意**: 学习器是可选的，可构建仅存在特征工程方法的 Pipeline 。"

#: 03fa4b6f069b4ef78a86584f1bc6ad20 09f7aba343c84f9195256be381c6a2fa
#: 1017b3c8551446b5991c4d3526764952 10651123d68a49ffb5311c42b199812b
#: 12c897bf75784d6eb74817ba2c19f863 170f8777a6e74337930e5d92f2462af4
#: 6767bc8435f6483f938e74807b3fffa5 7bdef9ea1aa34243879efb0fe2004dfe
#: b5ca449f96ba4be698d01ffaa6181c7a b968ac65e1ed40a99bc3a18a1cb6a8cb
#: ca1e22cfc66e4a1ca5a6c4acaf077c4d of paddlets.pipeline.pipeline.Pipeline
#: paddlets.pipeline.pipeline.Pipeline.fit
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform
#: paddlets.pipeline.pipeline.Pipeline.load
#: paddlets.pipeline.pipeline.Pipeline.predict
#: paddlets.pipeline.pipeline.Pipeline.predict_proba
#: paddlets.pipeline.pipeline.Pipeline.predict_score
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba
#: paddlets.pipeline.pipeline.Pipeline.save
#: paddlets.pipeline.pipeline.Pipeline.transform
msgid "Parameters"
msgstr ""

#: 7bd598c0876c4d03945b38ad6501ec25 of paddlets.pipeline.pipeline.Pipeline:6
msgid "A list of transformers and a final model."
msgstr "包含若干个特征工程方法与一个学习器的列表。构建方法参考下方案例："

#: a104ca8627e84d2c97e713d1b7cdda8b of paddlets.pipeline.pipeline.Pipeline:10
msgid "Examples"
msgstr ""

#: 86d88d54584044fc9c5c8f720fc1f20c of
#: paddlets.pipeline.pipeline.Pipeline.fit:1
msgid "Fit transformers and transform the data then fit the model."
msgstr "逐一 fit `Pipeline` 中的特征工程方法，并对数据进行 transform，然后 fit 学习器。"

#: 3b7d37cb178549468c3c0c9b6cbd21ce of
#: paddlets.pipeline.pipeline.Pipeline.fit:3
msgid "Train dataset."
msgstr "TSDataset训练集。"

#: a91ea2fa2f854e8682e84ac87a4e22af of
#: paddlets.pipeline.pipeline.Pipeline.fit:5
msgid "Valid dataset."
msgstr "TSDataset验证集。"

#: 2b9031b057ed4e728581906a2c91a148 5c863e1f9d384449b2bad8f01088b52d
#: 61517cdcf357424892e56d6b6074da10 6bb5303eb1dc47a7931b0c09a7447714
#: 75601112cd6f4d5187835b9c8c3844e2 892d574bd10148bcb1e9063791aa1dac
#: bc490b8096c04be48118908d783a615d c61d634c76704442912d915a1cc73080
#: d098b609dc7b405aab0901ca2a38c05c of paddlets.pipeline.pipeline.Pipeline.fit
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform
#: paddlets.pipeline.pipeline.Pipeline.load
#: paddlets.pipeline.pipeline.Pipeline.predict
#: paddlets.pipeline.pipeline.Pipeline.predict_proba
#: paddlets.pipeline.pipeline.Pipeline.predict_score
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba
#: paddlets.pipeline.pipeline.Pipeline.transform
msgid "Returns"
msgstr ""

#: 2507e6f1915447d0b81bf3a1c5f50cb2 of
#: paddlets.pipeline.pipeline.Pipeline.fit:8
msgid "Pipeline with fitted transformers and fitted model."
msgstr "对于各个特征工程方法与学习器都完成了 fit 的 Pipeline 。"

#: 1a42bf5bddc04acbb40e2f4bd4fd7759 2a0608a830e4435db8e04cf1cd175ffd
#: 4473458965b1405bb39eda6d09084167 46a00072ac5340158a665c6ffe881cee
#: 5bd087abd2964e3d8e166687a9ccb5fe 65a54e40983f4a29ba8036ffd45c9bdd
#: 8e0fe9c5d75542c6a870355a4e90ec0e 970570c3f18042febd78726dce2f37c5
#: c22b9573d1c040a79f3ecf9a87640934 of paddlets.pipeline.pipeline.Pipeline.fit
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform
#: paddlets.pipeline.pipeline.Pipeline.load
#: paddlets.pipeline.pipeline.Pipeline.predict
#: paddlets.pipeline.pipeline.Pipeline.predict_proba
#: paddlets.pipeline.pipeline.Pipeline.predict_score
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba
#: paddlets.pipeline.pipeline.Pipeline.transform
msgid "Return type"
msgstr ""

#: 67594caac40e4be8990ab5093e55c0ef of
#: paddlets.pipeline.pipeline.Pipeline.transform:1
msgid "Transform the `TSDataset` using the fitted transformers in the pipeline."
msgstr "利用 `Pipeline` 中已 fit 过的特征工程方法 transform 输入的 `TSDataset`"

#: 7c2210ac5f364617b79e298436170ee5 of
#: paddlets.pipeline.pipeline.Pipeline.transform:3
msgid "Data to be transformed."
msgstr "被处理的数据集。"

#: 502a51d5d4a14187b898f0a1b9ac0b0b cae104aee28b4daeb55b293a155896b1 of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:8
#: paddlets.pipeline.pipeline.Pipeline.transform:5
msgid ""
"Set to True to perform inplace transform and avoid a data copy. Default "
"is False."
msgstr "是否是在原本的数据集上转换"

#: 1b8c454c381244aaaee428bcea94cdb5 of
#: paddlets.pipeline.pipeline.Pipeline.transform:7
msgid "Cache each transform step's transorm result into a list."
msgstr "是否缓存数据转换的中间副本"

#: fe923827a62e43a8a8e39cbbd4e66d0d of
#: paddlets.pipeline.pipeline.Pipeline.transform:8
msgid "previous transform results cache"
msgstr "以前数据转换中间副本的缓存。"

#: 8dac56a5bcb64617876c40800a2a1b62 of
#: paddlets.pipeline.pipeline.Pipeline.transform:10
msgid ""
"Return transformed results by default, Return Both transformed results"
"     and each transform step's caches if set cache_transform_steps = "
"True."
msgstr "如果设置cache_transform_steps = True，那么将对数据转换的中间副本进行缓存"

#: bb093def09e64977b6a4a728cae5cf2f of
#: paddlets.pipeline.pipeline.Pipeline.transform:12
msgid "Return transformed results by default, Return Both transformed results"
msgstr ""

#: b6e60e8c9f444297ae4fc672b0fe0b39 of
#: paddlets.pipeline.pipeline.Pipeline.transform:13
msgid "and each transform step's caches if set cache_transform_steps = True."
msgstr "如果设置cache_transform_steps = True，那么将对数据转换的中间副本进行缓存"

#: 5b0a43eb138a40cdb40e46b92e327307 of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:1
msgid ""
"The inverse transformation of `self.transform`. Apply `inverse_transform`"
" using the fitted transformers in the pipeline. Note that not all "
"transformers implement `inverse_transform` method. If a transformer do "
"not implement `inverse_transform`, it would not inversely transform the "
"input data."
msgstr "数据集逆转换的方法"

#: ceabd5b7d00e4088ab9989761aa0416b of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:6
msgid "Data to apply `inverse_transform`."
msgstr "被逆向转换的数据集。"

#: 5aa60707624e45708ef2e6effdf88545 of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:11
msgid "Inversely transformed TSDataset."
msgstr "数据集逆转换"

#: 56e441f2a45a4f369f2a3641c69c30eb of
#: paddlets.pipeline.pipeline.Pipeline.predict:1
msgid ""
"Transform the `TSDataset` using the fitted transformers and perform "
"prediction with the fitted model in the pipeline, only effective when the"
" model exists in the pipeline."
msgstr ""
"利用 `Pipeline` 中已 fit 过的特征工程方法 transform 输入的 TSDataset，并利用已 fit "
"过的学习器执行预测。注意：此方法仅在模型存在时可用。"

#: 52ee059a830e488dbe1a48c2e89d1d27 85ce90c03e9e4ef1af2ffc53807d822d
#: 8ea2faba1d034d0da61f8e037ba3570c cb94006b89df48de857b1d63c7ed4cf3
#: f8eb11dda2ab43b6880b821f28ccd12b of
#: paddlets.pipeline.pipeline.Pipeline.predict:4
#: paddlets.pipeline.pipeline.Pipeline.predict_proba:4
#: paddlets.pipeline.pipeline.Pipeline.predict_score:4
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:6
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:6
msgid "Data to be predicted."
msgstr "被预测的数据集。"

#: 68e98b2e223f49ddbfd477df89ea9fb2 of
#: paddlets.pipeline.pipeline.Pipeline.predict:7
msgid "Predicted results of calling `self.predict` on the final model."
msgstr "预测结果。"

#: f2f5c342c00e40fc8ad934a593403f30 of
#: paddlets.pipeline.pipeline.Pipeline.predict_proba:1
msgid ""
"Transform the `TSDataset` using the fitted transformers and perform "
"probability prediction with the fitted model in the pipeline, only "
"effective when the model exists in the pipeline."
msgstr ""
"利用 `Pipeline` 中已 fit 过的特征工程方法 transform 输入的 TSDataset，并利用已 fit "
"过的学习器执行概率预测。注意：此方法仅在模型存在时可用。"

#: bdfecc28c68b42df98766c457fcca83f of
#: paddlets.pipeline.pipeline.Pipeline.predict_proba:7
msgid "Predicted results of calling `self.predict_proba` on the final model."
msgstr "概率预测结果。"

#: 48de961855aa43d18a07c1b1eec50f2b of
#: paddlets.pipeline.pipeline.Pipeline.predict_score:1
msgid ""
"Transform the `TSDataset` using the fitted transformers and perform "
"anomaly detection score prediction with the fitted model in the pipeline,"
" only effective when the model exists in the pipeline."
msgstr ""
"利用 `Pipeline` 中已 fit 过的特征工程方法 transform 输入的 TSDataset，并利用已 fit "
"过的学习器执行异常分数预测。注意：此方法仅在模型存在时可用。"

#: ec730b773d2b4675afd5ed6a150be910 of
#: paddlets.pipeline.pipeline.Pipeline.predict_score:7
msgid "Predicted results of calling `self.predict_score` on the final model."
msgstr "异常分数预测结果。"

#: ef0d71f569ef47c68886c00588df5a5f of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:1
msgid ""
"Apply `self.predict` method iteratively for multi-step time series "
"forecasting, the predicted results from the current call will be appended"
" to the `TSDataset` object and will appear in the loopback window for "
"next call. Note that each call of `self.predict` will return a result of "
"length `out_chunk_len`, so it will be called "
"ceiling(`predict_length`/`out_chunk_len`) times to meet the required "
"length."
msgstr ""
"递归预测：一步步利用 `self.predict` 方法实现多步时序预测。当前时刻的预测结果会被添加至 `TSDataset` "
"的目标列中，并在模型预测时，被添加至历史目标值的滑动窗口中用于下一时刻预测。注意：每次调用 `self.predict` 的输出长度为 "
"`out_chunk_len`， 所以 `self.predict` 会被调用 "
"ceiling(`predict_length`/`out_chunk_len`) 次，以满足多步时序的输出长度需求。"

#: 636c2a1dcbd34516941cf57642e3d77b f34d009597954c6b8ea9ee5294aa8c56 of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:8
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:8
msgid "Length of predicted results."
msgstr "预测结果长度"

#: 0fef4169671b4f24b41001ffef862a46 c9ed5f77edc94865a95e61e7760a68b6 of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:11
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:11
msgid "Predicted results."
msgstr "预测结果"

#: b96a9a0e67294d89a30292b73b470ca8 of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:1
msgid ""
"Apply `self.predict_proba` method iteratively for multi-step time series "
"forecasting, the predicted results from the current call will be appended"
" to the `TSDataset` object and will appear in the loopback window for "
"next call. Note that each call of `self.predict_proba` will return a "
"result of length `out_chunk_len`, so it will be called "
"ceiling(`predict_length`/`out_chunk_len`) times to meet the required "
"length."
msgstr ""
"递归预测：一步步利用 `self.predict_proba` 方法实现多步时序预测。当前时刻的预测结果会被添加至 `TSDataset` "
"的目标列中，并在模型预测时，被添加至历史目标值的滑动窗口中用于下一时刻预测。注意：每次调用 `self.predict_proba` 的输出长度为"
" `out_chunk_len`， 所以 `self.predict_proba` 会被调用 "
"ceiling(`predict_length`/`out_chunk_len`) 次，以满足多步时序的输出长度需求。"

#: a9c2002d2fa64cfa910065ea07684405 of
#: paddlets.pipeline.pipeline.Pipeline.save:1
msgid "Save the pipeline to a directory."
msgstr "将 Pipeline 保存至指定目录中。"

#: 6f8dc7e4b2494046bdbf6d99059d2237 of
#: paddlets.pipeline.pipeline.Pipeline.save:3
msgid "Output directory path."
msgstr "输出目录"

#: 9fdad174038e4571b8497b157118c874 e2ed76888bfd40848d27bd7082ccd8ef of
#: paddlets.pipeline.pipeline.Pipeline.load:5
#: paddlets.pipeline.pipeline.Pipeline.save:5
msgid ""
"Name of pipeline object. This file contains transformers and meta "
"information of pipeline."
msgstr "PipeLine 对象的名称。此文件包含若干特征工程方法和 Pipeline 的元信息。"

#: 0dac270244dc4c7398e39e8a9410dabf 364e3e5794c449c39a9ceb1ccec0ef06 of
#: paddlets.pipeline.pipeline.Pipeline.load:8
#: paddlets.pipeline.pipeline.Pipeline.save:8
msgid "Name of model object. See `BaseModel.save` for more information."
msgstr "Model 对象的名称。详细信息请参考 BaseModel 的 save() 方法。"

#: ca670586d1a84076a1a59648162237ce of
#: paddlets.pipeline.pipeline.Pipeline.load:1
msgid "Load the pipeline from a directory."
msgstr "从目录中加载一个 Pipeline 。"

#: d071a276ef634461be4995fac07d6b25 of
#: paddlets.pipeline.pipeline.Pipeline.load:3
msgid "Input directory path."
msgstr "输入目录"

#: 4000a8f17a6644f9b02dac5fc372612e of
#: paddlets.pipeline.pipeline.Pipeline.load:11
msgid "The loaded pipeline."
msgstr "被加载的 Pipeline 对象。"

#~ msgid "Bases: :py:class:`bts.models.base.Trainable`"
#~ msgstr ""

