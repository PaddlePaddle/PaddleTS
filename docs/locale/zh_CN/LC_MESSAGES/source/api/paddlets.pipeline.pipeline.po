# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, PaddleTS
# This file is distributed under the same license as the PaddleTS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: PaddleTS \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-16 16:20+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/api/paddlets.pipeline.pipeline.rst:2
#: 9e9dde4a4c734c98b3a6281a18fefdfe
msgid "paddlets.pipeline.pipeline"
msgstr ""

#: 73ee773e32b342259c1f668e93971390 of paddlets.pipeline.pipeline.Pipeline:1
msgid "Bases: :py:class:`~paddlets.models.base.Trainable`"
msgstr ""

#: e8e2592f44b6454b84c594afd4e1411d of paddlets.pipeline.pipeline.Pipeline:1
msgid ""
"The pipeline is designed to build a workflow for time series modeling "
"which may be comprised of a set of transformers and an model."
msgstr "`Pipeline` 被用于构建一个时序建模机器学习工作流，它可以包含若干个特征工程方法与一个学习器。"

#: 44426ef25701489dac55697c00265c51 of paddlets.pipeline.pipeline.Pipeline:4
msgid "**Note**: The model is optional."
msgstr "**注意**: 学习器是可选的，可构建仅存在特征工程方法的 Pipeline 。"

#: 100c9b88595f48a2979ad9fd71c205e9 13486b83f5d7440b9b2498fe767e72fa
#: 1fc07b54f7904088a6a34f7797df0863 2fb8385420834359a880a0f59b997d2e
#: 574a732f75134abe9b8d7ee3c8eab1e7 6da5316b74a94061a3a3b16d89c74e07
#: beb47f844b914358b4c4508f6389918d c03d271326154cf290454b45c5afdfd1
#: d40b142b5ce14e5ca84de51cf60ffa6b d80a1415e0d143a6902c572aa9315fe3 of
#: paddlets.pipeline.pipeline.Pipeline paddlets.pipeline.pipeline.Pipeline.fit
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform
#: paddlets.pipeline.pipeline.Pipeline.load
#: paddlets.pipeline.pipeline.Pipeline.predict
#: paddlets.pipeline.pipeline.Pipeline.predict_proba
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba
#: paddlets.pipeline.pipeline.Pipeline.save
#: paddlets.pipeline.pipeline.Pipeline.transform
msgid "Parameters"
msgstr ""

#: 1867f805375948ab96967cf6bcf79ac1 of paddlets.pipeline.pipeline.Pipeline:6
msgid "A list of transformers and a final model."
msgstr "包含若干个特征工程方法与一个学习器的列表。构建方法参考下方案例："

#: ee8dad31734f45d991183dadbb235cf8 of paddlets.pipeline.pipeline.Pipeline:10
msgid "Examples"
msgstr ""

#: 733ea0825ffb4ef7ad4c05b5dbc88093 of
#: paddlets.pipeline.pipeline.Pipeline.fit:1
msgid "Fit transformers and transform the data then fit the model."
msgstr "逐一拟合 `Pipeline` 中的特征工程方法，并对数据进行 transform，然后拟合学习器。"

#: 2917b29d1ae543d1b8b1a560e56f8e6d of
#: paddlets.pipeline.pipeline.Pipeline.fit:3
msgid "Train dataset."
msgstr "TSDataset训练集。"

#: d86ff7d8557841178d71c064b53c252d of
#: paddlets.pipeline.pipeline.Pipeline.fit:5
msgid "Valid dataset."
msgstr "TSDataset验证集。"

#: 1a304a7222fd4ae69e9bbc529dd36f65 6c16c7f4d69a41bfbe7c9e79d922e96c
#: 75a5de3f8fcf4d8a9459ae27aad36fd2 76c3179923604be9b9a518aa5cc30018
#: 9fd5e86380f341eea9e15487fb02cf80 b36ebd348c9349b98144aafd05a6c50d
#: e03e39fd008b403080f141730a0a85fc ef98b18acd684066aa4833928fbd4755 of
#: paddlets.pipeline.pipeline.Pipeline.fit
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform
#: paddlets.pipeline.pipeline.Pipeline.load
#: paddlets.pipeline.pipeline.Pipeline.predict
#: paddlets.pipeline.pipeline.Pipeline.predict_proba
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba
#: paddlets.pipeline.pipeline.Pipeline.transform
msgid "Returns"
msgstr ""

#: ccc878547e7f4ddb92203d3fed8f1e97 of
#: paddlets.pipeline.pipeline.Pipeline.fit:8
msgid "Pipeline with fitted transformers and fitted model."
msgstr "对于各个特征工程方法与学习器都完成了拟合的 Pipeline 。"

#: 0093fa9b30844316992d4de3249be425 10135097e4864d3db82e7bee63b303be
#: 3913d68138af4d438249f8804af0f426 711c405aed32439e9e08b7cc81104858
#: 7c931ea59405483f8186c4109c54b27a a21ecb5b6ac24ea798100c30609a5737
#: b3f7de19d5554f9eb6809bcf556bcece fd6f97cab81544ce8b6efc194c53fc31 of
#: paddlets.pipeline.pipeline.Pipeline.fit
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform
#: paddlets.pipeline.pipeline.Pipeline.load
#: paddlets.pipeline.pipeline.Pipeline.predict
#: paddlets.pipeline.pipeline.Pipeline.predict_proba
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba
#: paddlets.pipeline.pipeline.Pipeline.transform
msgid "Return type"
msgstr ""

#: ee82e63bab044e5cb5ddaa517a6184ff of
#: paddlets.pipeline.pipeline.Pipeline.transform:1
msgid "Transform the `TSDataset` using the fitted transformers in the pipeline."
msgstr "利用 `Pipeline` 中已拟合过的特征工程方法 transform 输入的 `TSDataset` 时序数据集。"

#: 10ca411b2c7a4cd68a08cd2fe12d45c1 of
#: paddlets.pipeline.pipeline.Pipeline.transform:3
msgid "Data to be transformed."
msgstr "被处理的数据集。"

#: c378b80d593745bca72e5d487014c2d5 e74e97515231442bb1b893b8fac11dcc of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:8
#: paddlets.pipeline.pipeline.Pipeline.transform:5
msgid ""
"Set to True to perform inplace transform and avoid a data copy. Default "
"is False."
msgstr "若设置为True，则会执行一个就地转换，并避免一次数据拷贝。默认值为False。"

#: 013713571807482c95940961bc39f7aa of
#: paddlets.pipeline.pipeline.Pipeline.transform:7
msgid "Cache each transform step's transorm result into a list."
msgstr ""

#: cfd0650838cd42ddbda4b6dc849c3b75 of
#: paddlets.pipeline.pipeline.Pipeline.transform:8
msgid "previous transform results cache"
msgstr "处理完成的数据集。"

#: dba16a555b854c1581b8074f90fa0ac7 of
#: paddlets.pipeline.pipeline.Pipeline.transform:10
msgid ""
"Return transformed results by default, Return Both transformed results"
"     and each transform step's caches if set cache_transform_steps = "
"True."
msgstr ""

#: 869cea220b9c4073899e1feff8129e1b of
#: paddlets.pipeline.pipeline.Pipeline.transform:12
msgid "Return transformed results by default, Return Both transformed results"
msgstr ""

#: 6e40286ffb894087a1bb4b2d096f1fa4 of
#: paddlets.pipeline.pipeline.Pipeline.transform:13
msgid "and each transform step's caches if set cache_transform_steps = True."
msgstr ""

#: 2c016d022f5d4027912b520750e04006 of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:1
msgid ""
"The inverse transformation of `self.transform`. Apply `inverse_transform`"
" using the fitted transformers in the pipeline. Note that not all "
"transformers implement `inverse_transform` method. If a transformer do "
"not implement `inverse_transform`, it would not inversely transform the "
"input data."
msgstr ""
"此方法是 `self.transform` 的逆向转换方法。利用 `Pipeline` 中已拟合过的特征工程方法 "
"`inverse_transform` 输入的 `TSDataset`。注意：并非所有的特征工程方法都实现了 "
"`inverse_transform`， 若某个没有实现 `inverse_transform`，则不会对数据进行逆处理。"

#: 20a55580f5394c8b8ff9231b4ab1f6ba of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:6
msgid "Data to apply `inverse_transform`."
msgstr "被逆向转换的数据集。"

#: 988aeae6bbfc445995d10fb8f7fa02f9 of
#: paddlets.pipeline.pipeline.Pipeline.inverse_transform:11
msgid "Inversely transformed TSDataset."
msgstr "完成逆向转换的数据集"

#: adeb7e535a4840369966e924488e572a of
#: paddlets.pipeline.pipeline.Pipeline.predict:1
msgid ""
"Transform the `TSDataset` using the fitted transformers and perform "
"prediction with the fitted model in the pipeline, only effective when the"
" model exists in the pipeline."
msgstr ""
"利用 `Pipeline` 中已拟合过的特征工程方法 transform 输入的  `TSDataset` "
"时序数据集，并利用已拟合过的学习器执行预测。注意：此方法仅在模型存在时可用。"

#: 27048fcff0dc48d1b182f3e45a3b04ea 8b1ca7be63d34639a125b313bc8724a0
#: 90b181b172f945d2a27e397c4b51a415 ffa43362bad44cb7bf851b7ea6f0f607 of
#: paddlets.pipeline.pipeline.Pipeline.predict:4
#: paddlets.pipeline.pipeline.Pipeline.predict_proba:4
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:6
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:6
msgid "Data to be predicted."
msgstr "被预测的数据集。"

#: 1596b6ac130d4fa5bba5159185482d71 of
#: paddlets.pipeline.pipeline.Pipeline.predict:7
msgid "Predicted results of calling `self.predict` on the final model."
msgstr "预测结果。"

#: 412930a4662049bf96006781944c6720 of
#: paddlets.pipeline.pipeline.Pipeline.predict_proba:1
msgid ""
"Transform the `TSDataset` using the fitted transformers and perform "
"probability prediction with the fitted model in the pipeline, only "
"effective when the model exists in the pipeline."
msgstr ""
"利用 `Pipeline` 中已拟合过的特征工程方法 transform 输入的 `TSDataset` "
"时序数据集，并利用已拟合过的学习器执行概率预测。注意：此方法仅在模型存在时可用。"

#: 41d6d1df2962456696d05fb95ff67a5c of
#: paddlets.pipeline.pipeline.Pipeline.predict_proba:7
msgid "Predicted results of calling `self.predict_proba` on the final model."
msgstr "概率预测结果。"

#: 0cae19124e5c46399ae75a2509100469 of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:1
msgid ""
"Apply `self.predict` method iteratively for multi-step time series "
"forecasting, the predicted results from the current call will be appended"
" to the `TSDataset` object and will appear in the loopback window for "
"next call. Note that each call of `self.predict` will return a result of "
"length `out_chunk_len`, so it will be called "
"ceiling(`predict_length`/`out_chunk_len`) times to meet the required "
"length."
msgstr ""
"递归预测：一步步利用 `self.predict` 方法实现多步时序预测。当前时刻的预测结果会被添加至 `TSDataset` "
"时序数据集的目标列中，并在模型预测时，被添加至历史目标值的滑动窗口中用于下一时刻预测。注意：每次调用 `self.predict` 的输出长度为 "
"`out_chunk_len`， 所以 `self.predict` 会被调用 "
"ceiling(`predict_length`/`out_chunk_len`) 次，以满足多步时序的输出长度需求。"

#: 54903f742e544cdebff87d02c77cc659 786967240a3541dfb932eb1b9df670fc of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:8
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:8
msgid "Length of predicted results."
msgstr "递归多步预测的长度。"

#: 3796ee1960e94e1197eca09dd296e109 9899a6db2a85481c92b703eb096e9821 of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict:11
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:11
msgid "Predicted results."
msgstr "预测结果。"

#: 58637cf5462742f2bd2b49458a99df8d of
#: paddlets.pipeline.pipeline.Pipeline.recursive_predict_proba:1
msgid ""
"Apply `self.predict_proba` method iteratively for multi-step time series "
"forecasting, the predicted results from the current call will be appended"
" to the `TSDataset` object and will appear in the loopback window for "
"next call. Note that each call of `self.predict_proba` will return a "
"result of length `out_chunk_len`, so it will be called "
"ceiling(`predict_length`/`out_chunk_len`) times to meet the required "
"length."
msgstr ""
"递归预测：一步步利用 `self.predict_proba` 方法实现多步时序预测。当前时刻的预测结果会被添加至 `TSDataset` "
"时序数据集的目标列中，并在模型预测时，被添加至历史目标值的滑动窗口中用于下一时刻预测。注意：每次调用 `self.predict_proba` "
"的输出长度为 `out_chunk_len`， 所以 `self.predict_proba` 会被调用 "
"ceiling(`predict_length`/`out_chunk_len`) 次，以满足多步时序的输出长度需求。"

#: a8370d66992c4296b236b249527e3e3c of
#: paddlets.pipeline.pipeline.Pipeline.save:1
msgid "Save the pipeline to a directory."
msgstr "将 Pipeline 保存至指定目录中。"

#: 67942e9fc00340159dc45cb12d203288 of
#: paddlets.pipeline.pipeline.Pipeline.save:3
msgid "Output directory path."
msgstr "输出目录"

#: 483ff4c38a3e44908ee039cbc511ea74 d8911a3ac5cc4237ab77a2846031fe93 of
#: paddlets.pipeline.pipeline.Pipeline.load:5
#: paddlets.pipeline.pipeline.Pipeline.save:5
msgid ""
"Name of pipeline object. This file contains transformers and meta "
"information of pipeline."
msgstr "PipeLine 对象的名称。此文件包含若干特征工程方法和 Pipeline 的元信息。"

#: aa76b60770b44ed29381843275eeddec f945c22f074a4056be15c31506af0953 of
#: paddlets.pipeline.pipeline.Pipeline.load:8
#: paddlets.pipeline.pipeline.Pipeline.save:8
msgid "Name of model object. See `BaseModel.save` for more information."
msgstr "Model 对象的名称。详细信息请参考 BaseModel 的 save() 方法。"

#: 15caf4863d294200b2bb006e2d54f056 of
#: paddlets.pipeline.pipeline.Pipeline.load:1
msgid "Load the pipeline from a directory."
msgstr "从目录中加载一个 Pipeline 。"

#: b22d3683d7df4126b4fcb8dd2f369942 of
#: paddlets.pipeline.pipeline.Pipeline.load:3
msgid "Input directory path."
msgstr "输入目录"

#: b69d22fe41e0480388aba7bbd50c49e1 of
#: paddlets.pipeline.pipeline.Pipeline.load:11
msgid "The loaded pipeline."
msgstr "被加载的 Pipeline 对象。"

