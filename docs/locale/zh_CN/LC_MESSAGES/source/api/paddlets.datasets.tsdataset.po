# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, PaddleTS
# This file is distributed under the same license as the PaddleTS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleTS \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-03 11:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/api/paddlets.datasets.tsdataset.rst:2
#: b7f21d3927e149ac9612b02a4cd99a8d
msgid "paddlets.datasets.tsdataset"
msgstr ""

#: c53c5de7022b43a2bddde16d506e90e5 f4c503cde5664003b1c8f32afe1a90d3 of
#: paddlets.datasets.tsdataset:1 paddlets.datasets.tsdataset.TSDataset:1
msgid ""
"TSDataset is the fundamental data class in PaddleTS, which is designed as"
" the first-class citizen to represent the time series data. It is widely "
"used in PaddleTS. In many cases, a function consumes a TSDataset and "
"produces another TSDataset. A TSDataset object is comprised of two kinds "
"of time series data:"
msgstr ""
"``TSDataset`` 是 `PaddleTS` "
"中一个主要的类结构，用于表示绝大多数的时序样本数据，并作为PaddleTS其他算子的输入以及输出对象。TSDataset 包涵两类时序数据："

#: 3dd4d11f167e45e5b09d12bea2d03a5a 5509ac8d68dc4008a04ddeca82dd43e1 of
#: paddlets.datasets.tsdataset:5 paddlets.datasets.tsdataset.TSDataset:5
msgid ""
"Target:  the key time series data in the time series modeling tasks (e.g."
" those needs to be forecasted in the time series forecasting tasks)."
msgstr "待预测目标：表示希望被预测的时序序列"

#: 19d161e741ab428b9c68f52d6fb6a317 7409499279fc46a687d5e21739b28048 of
#: paddlets.datasets.tsdataset:6 paddlets.datasets.tsdataset.TSDataset:6
msgid ""
"Covariate: the relevant time series data which are usually helpful for "
"the time series modeling tasks."
msgstr "协变量：无需被预测的时间序列，协变量的加入通常用于辅助提高模型预测的效果"

#: 103b5d5a72d5473da12fc96596e415fd d8282ac0c2cf475086af2292214065f4 of
#: paddlets.datasets.tsdataset:8 paddlets.datasets.tsdataset.TSDataset:8
msgid "Currently, it supports the representation of:"
msgstr "TSDataset支持的时序样本数据可以分为："

#: 38954cab18624f3db94367d1516a38b0 e30c3bf445254cdd9fd0db6ffee4996e of
#: paddlets.datasets.tsdataset:10 paddlets.datasets.tsdataset.TSDataset:10
msgid "Time series of single target w/wo covariates."
msgstr "单变量数据，只包含单列的预测目标，同时可以包涵单列或者多列协变量"

#: 6dfde7a54a464a5793e64bf847cef5b1 f59ec622c03f4952a07999631b66335f of
#: paddlets.datasets.tsdataset:11 paddlets.datasets.tsdataset.TSDataset:11
msgid "Time series of multiple targets w/wo covariates."
msgstr "多变量数据，包涵多列预测目标，同时可以包涵单列或者多列协变量"

#: 07bbb713a990476abbe77aa0e73f96a9 6cb68a0748c94299a485081978766a3d of
#: paddlets.datasets.tsdataset:13 paddlets.datasets.tsdataset.TSDataset:13
msgid "And the covariates can be categorized into one of the following 3 types:"
msgstr "我们将非预测目标变量定义为协变量，在时序数据中，协变量可分为以下三种："

#: d31ab00d98434035a4a31d64ca1a1331 d9cef7e0f6d045758e73ea180dbcf989 of
#: paddlets.datasets.tsdataset:16 paddlets.datasets.tsdataset.TSDataset:16
msgid "Observed covariates (`observed_cov`):"
msgstr "观测协变量 (`observed_cov`)"

#: ccba2369089346c39f779b00c571800e de754e7d611d4802b3526694ec3b74d5 of
#: paddlets.datasets.tsdataset:16 paddlets.datasets.tsdataset.TSDataset:16
msgid ""
"referring to those variables which can only be observed in the historical"
" data, e.g. measured temperatures"
msgstr "指只能在历史中观察到的变量数据，例如测量的温度"

#: 4d708d0dbeb54b888750483ec7dd3ad1 82e0216c1f50441e8020e6ade47ac0a1 of
#: paddlets.datasets.tsdataset:19 paddlets.datasets.tsdataset.TSDataset:19
msgid "Known covariates (`known_cov`):"
msgstr "可预知协变量 (`known_cov`)"

#: a1544f97554d4f6b99beab334d9ce278 c27ab4d4e64e45f5b130fe9104e48a90 of
#: paddlets.datasets.tsdataset:19 paddlets.datasets.tsdataset.TSDataset:19
msgid ""
"referring to those variables which can be determined at present for "
"future time steps, e.g. weather forecasts"
msgstr "指可在预测未来时间已知的变量，例如天气预报"

#: 490910dab9224f8bbe55bb180d6219b8 f3722117035647d4b49025253720684f of
#: paddlets.datasets.tsdataset:22 paddlets.datasets.tsdataset.TSDataset:22
msgid "Static covariates (`static_cov`):"
msgstr "静态协变量 (`static_cov`)"

#: 28f90b39895c46d2ae49015a8f629836 c8d2b4cbd50440bea95746886e5fb3af of
#: paddlets.datasets.tsdataset:22 paddlets.datasets.tsdataset.TSDataset:22
msgid "referring to those variables which keep constant over time"
msgstr "指整个时间范围内保持不变的变量"

#: 859e751cb077451a9e4427732bf2da09 b365bff5ca3f454e946bd456b4169492 of
#: paddlets.datasets.tsdataset:24 paddlets.datasets.tsdataset.TSDataset:24
msgid ""
"A TSDataset object includes one or more TimeSeries objects, representing "
"targets, known covariates (known_cov), observed covariates "
"(observed_cov), and static covariates (static_cov), respectively."
msgstr ""
"一个 ``TSDataset`` 对象由一个或者多个 ``TimeSeries`` 对象构成，每个 ``TimeSeries`` "
"可分别代表target（待预测目标）， observed_covariate（观测协变量）以及known_covariate（可预知协变量）。"

#: 5697b55675284061b3c44104e17d6b55 c11330d9b5464d03a6ec7965e06986ad of
#: paddlets.datasets.tsdataset.TSDataset:1
#: paddlets.datasets.tsdataset.TimeSeries:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: fa69defa508f43dc8949e41bcc0f9669 of paddlets.datasets.tsdataset.TimeSeries:1
msgid ""
"TimeSeries is the atomic data structure for representing target(s), "
"observed covariates (observed_cov), and known covariates (known_cov). "
"Each could be comprised of a single or multiple time series data."
msgstr ""
"TimeSeries 是用于表示时序数据的最小粒度。可以分别代表target, observed_covariate "
"或者known_covariate 其中一种类型。TimeSeries本身可以是单变量或者多变量。"

#: 1f5d5860d338434b9a5f9961ca9d8a65 2050bfc50b894e1795c4f94c288fefc0
#: 21c05450d0284c0caf87cc609ca74040 2edb2a3f0b8d4980b4a772f1b8d59970
#: 2ef8ceb507a14dc4b21d034cb90d0234 3ac0dd0c14f0481bb19abef8c171e1dd
#: 41901f43fd464dbb8b7a226743f17675 44f45e9e3c6549d899c0e3cf128ef5a2
#: 4675f75fd2f4415faae5016f2141e7b2 4dabbd5ab53b4849ac9579edd1ff1f85
#: 4e311957179a4644b2d273c4c2b0a044 503e4861e7064b0499c4116bbcdfe71f
#: 5b20e3989bc0445ea3fa3800f6939079 5bfa17555dfc438ab68468eb754c6e64
#: 6221ab0c0c854fadaab6640f3fe6d0e4 624098fe68ae4a2f8fc16e2b64918974
#: 6e236ded7d2c46b7b24e88f10c62899e 7398f69feb9644c2a11ee9f7b6102ee8
#: 73a6862b66ae4c189edbba0e432eae45 842ff21320df43e9a8f93fd269448a8a
#: 8451e0ba32224c0ab6c90f9e3031c94e 94e411f0bf114a859270538d01528ecd
#: 95b41a0510144129b852461f5966485a b6c6448129004f6c9a40d4377bcf4176
#: bd70806f945b4864b071622aa815a08b bf2ac54fc9f14515b6e8dc7ce610dff2
#: cba2a3972ec349dbb1193149201048c2 d5284dced1c84f99baf97414a5fd4b5b
#: dc3a3e426bc04c64b02a260955271b4b e2e157ecef9a45569786b4a162c78dec
#: eca76d1d5f584042aa3d82abcc4285fd ef54981c282c4829a883b6477f943e91
#: f25310ecad9c4195aafd950039b51b52 f554684f81d84f9eaf1d0138a4cdd493
#: f6142bf17da14221984a9a5f0a909b50 f7973fe63ddf4db6bff4e4a7d2869c8f
#: f9c713535bb149a9959c46c50216b3e0 of paddlets.datasets.tsdataset.TSDataset
#: paddlets.datasets.tsdataset.TSDataset.astype
#: paddlets.datasets.tsdataset.TSDataset.concat
#: paddlets.datasets.tsdataset.TSDataset.drop
#: paddlets.datasets.tsdataset.TSDataset.get_item_from_column
#: paddlets.datasets.tsdataset.TSDataset.load
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe
#: paddlets.datasets.tsdataset.TSDataset.load_from_json
#: paddlets.datasets.tsdataset.TSDataset.plot
#: paddlets.datasets.tsdataset.TSDataset.save
#: paddlets.datasets.tsdataset.TSDataset.set_column
#: paddlets.datasets.tsdataset.TSDataset.set_feature
#: paddlets.datasets.tsdataset.TSDataset.set_known_cov
#: paddlets.datasets.tsdataset.TSDataset.set_label
#: paddlets.datasets.tsdataset.TSDataset.set_observed_cov
#: paddlets.datasets.tsdataset.TSDataset.set_static_cov
#: paddlets.datasets.tsdataset.TSDataset.set_target
#: paddlets.datasets.tsdataset.TSDataset.sort_columns
#: paddlets.datasets.tsdataset.TSDataset.split
#: paddlets.datasets.tsdataset.TSDataset.to_categorical
#: paddlets.datasets.tsdataset.TSDataset.to_dataframe
#: paddlets.datasets.tsdataset.TSDataset.to_numeric
#: paddlets.datasets.tsdataset.TSDataset.to_numpy
#: paddlets.datasets.tsdataset.TimeSeries
#: paddlets.datasets.tsdataset.TimeSeries.astype
#: paddlets.datasets.tsdataset.TimeSeries.concat
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe
#: paddlets.datasets.tsdataset.TimeSeries.load_from_json
#: paddlets.datasets.tsdataset.TimeSeries.reindex
#: paddlets.datasets.tsdataset.TimeSeries.sort_columns
#: paddlets.datasets.tsdataset.TimeSeries.split
#: paddlets.datasets.tsdataset.TimeSeries.to_categorical
#: paddlets.datasets.tsdataset.TimeSeries.to_dataframe
#: paddlets.datasets.tsdataset.TimeSeries.to_numeric
#: paddlets.datasets.tsdataset.TimeSeries.to_numpy
msgid "Parameters"
msgstr ""

#: 6db4425bdd7844249ad415a06ba54103 97b6cd87e7ae411aaca29237dfb1aa2c of
#: paddlets.datasets.tsdataset.TimeSeries:4
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:3
msgid "A Pandas DataFrame or Series containing the time series data"
msgstr "样本数据，可以是目标变量或者协变量"

#: 948801fe0f4842dc813ddaef9049c57e d7f9dd04baf445cfa42e3ffc3835fa2f of
#: paddlets.datasets.tsdataset.TimeSeries:6
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:11
msgid ""
"A string or int representing the Pandas DateTimeIndex's frequency or "
"RangeIndex's step size"
msgstr "样本数据频率，用于调整data以及配合fillna进行空行填充"

#: 0c59cb7775074503bc2b5f891385b75b 11def118c4494a6482f4e703ecf96b45
#: 12ddc6c73be748328b4c5f50644e80b8 1fb8d4d6763049d5b5450e129b24e3c1
#: 26e15b477ca64816b4e241c48036ec68 3d4cdab2bd8843a395d0c0f6c3f77fe6
#: 46921e62ac92470cba5881d96cc11d19 4f5c7e8cd149457d83d141b5cb57dc28
#: 52f79cab62154127ade74fe173fbb126 6ad5b43e2c7f41159cccd3dd9926780f
#: 6dc6549e12d343f2b9798e8d6a3a3eb7 75defb1f8861494e9f6dcb9951adad55
#: 780efb38ec59406788b381c15c70d66f 7aeb93edfabd4221bfabcf4268540c8e
#: 81eeda1140b64e17be670dd27c9cd7f6 82b7515e0ba84ea18637561498af300e
#: 95175bd02bc74736b6a09d7c9c7ebdf7 9e44061fe36a4e5da968a408b0e66c3b
#: a00fde664ed648acb976f452793ff903 a526c508055b4a60b3c84b8f9613c642
#: a62b6d42976d44a69511e77e6c9a4969 af8ea8dc7c51407d94b435be83518bbb
#: b7362a03f2c6479399d51d4c20a72750 b8110ca12b5f4b098a2faa0c4e84352f
#: bb003c2109fb44dc95b67d5e41ff46d1 bd58111b900048feb11ca51fd0797e1a
#: bd5fdb39533541d39af1bd8e386d9106 bfaefc533eec42689c848d5e2ac41325
#: c3f4f908ccc9429cad667566a8711fc4 c477e100e922463b9aeb501794c0a2ac
#: c4ad9428444d40438cd45ac525f72850 d507581bf32e484393b3969485b7ac59
#: d54d64194c6f4c6d9e6d6a15db78b934 dc2f11489d0149bc9ec82ec5b792f9dd
#: e71bf9ece81246bd85b3861392d55bbe ec330a8e234f43d2ac58af5edc0e1495
#: ee0efb47ba694822a1f6efa5c75843de f98c5cdee1c14a74b39eb4210eb0c213
#: f9a26c9d602b4117859ce1b04874f3a6 fceb63d6d6054d1b8f421dfa4d53ba1a of
#: paddlets.datasets.tsdataset.TSDataset.columns
#: paddlets.datasets.tsdataset.TSDataset.concat
#: paddlets.datasets.tsdataset.TSDataset.copy
#: paddlets.datasets.tsdataset.TSDataset.drop
#: paddlets.datasets.tsdataset.TSDataset.dtypes
#: paddlets.datasets.tsdataset.TSDataset.get_all_cov
#: paddlets.datasets.tsdataset.TSDataset.get_feature
#: paddlets.datasets.tsdataset.TSDataset.get_item_from_column
#: paddlets.datasets.tsdataset.TSDataset.get_known_cov
#: paddlets.datasets.tsdataset.TSDataset.get_label
#: paddlets.datasets.tsdataset.TSDataset.get_observed_cov
#: paddlets.datasets.tsdataset.TSDataset.get_static_cov
#: paddlets.datasets.tsdataset.TSDataset.get_target
#: paddlets.datasets.tsdataset.TSDataset.load
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe
#: paddlets.datasets.tsdataset.TSDataset.load_from_json
#: paddlets.datasets.tsdataset.TSDataset.plot
#: paddlets.datasets.tsdataset.TSDataset.set_column
#: paddlets.datasets.tsdataset.TSDataset.set_feature
#: paddlets.datasets.tsdataset.TSDataset.set_known_cov
#: paddlets.datasets.tsdataset.TSDataset.set_label
#: paddlets.datasets.tsdataset.TSDataset.set_observed_cov
#: paddlets.datasets.tsdataset.TSDataset.set_static_cov
#: paddlets.datasets.tsdataset.TSDataset.set_target
#: paddlets.datasets.tsdataset.TSDataset.split
#: paddlets.datasets.tsdataset.TSDataset.to_dataframe
#: paddlets.datasets.tsdataset.TSDataset.to_json
#: paddlets.datasets.tsdataset.TSDataset.to_numpy
#: paddlets.datasets.tsdataset.TimeSeries
#: paddlets.datasets.tsdataset.TimeSeries.concat
#: paddlets.datasets.tsdataset.TimeSeries.copy
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe
#: paddlets.datasets.tsdataset.TimeSeries.load_from_json
#: paddlets.datasets.tsdataset.TimeSeries.reindex
#: paddlets.datasets.tsdataset.TimeSeries.split
#: paddlets.datasets.tsdataset.TimeSeries.to_dataframe
#: paddlets.datasets.tsdataset.TimeSeries.to_json
#: paddlets.datasets.tsdataset.TimeSeries.to_numpy
msgid "Returns"
msgstr ""

#: 3a42b706c0e74f91891f3f2d8434f22b 573592e0f9f84cc7952899ba1b4d23f2
#: 606eddc1e67649e0a015a72d14223440 66859917f25c4e4faf372e97e59a07d3
#: 699e7a7f48ff4a4a97a5dde72aff4deb 6a24902ea96c40c09eb70cc765cebf9e
#: bd66b3e216854223b32c0642fd79b74f c25d5742370b413fae5f2c86ca8ba2b3
#: faf928e1ab1e4dc79aaf4175449c4278 of
#: paddlets.datasets.tsdataset.TSDataset.drop:6
#: paddlets.datasets.tsdataset.TSDataset.set_column:11
#: paddlets.datasets.tsdataset.TSDataset.set_feature:4
#: paddlets.datasets.tsdataset.TSDataset.set_known_cov:4
#: paddlets.datasets.tsdataset.TSDataset.set_label:4
#: paddlets.datasets.tsdataset.TSDataset.set_observed_cov:4
#: paddlets.datasets.tsdataset.TSDataset.set_static_cov:6
#: paddlets.datasets.tsdataset.TSDataset.set_target:4
#: paddlets.datasets.tsdataset.TimeSeries:9
msgid "None"
msgstr "None"

#: 2ff2b777257e42a386a8a90ff610f8b9 of
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:1
msgid "Construct a TimeSeries object from the specified columns of a DataFrame"
msgstr "基于DataFrame构建TimeSeries"

#: 730dae816c7946bbabd8e617ccb1fd62 of
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:5
msgid ""
"The name of time column, a Pandas DatetimeIndex or RangeIndex. If not "
"set, the DataFrame's index will be used."
msgstr "时间列，可以是DatetimeIndex或者RangeIndex类型，如果为None，将index作为时间列"

#: 86f48d00ce1e412fbe52bc76a6f3aa5b of
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:8
msgid ""
"The name of column or the list of columns from which to extract the time "
"series data. If set to `None`, all columns except for the time column "
"will be used as value columns."
msgstr "data中需要选取的数据，如果不指定，数据中所有列（除时间列外）都会被导入"

#: 0c2612032306472bae648dfe8dd2ec4b of
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:13
msgid ""
"Drop time series tail nan value or not, if True, drop all `Nan` value "
"after the last `non-Nan` element in the current time series. eg: [nan, 3,"
" 2, nan, nan] -> [nan, 3, 2], [3, 2, nan, nan] -> [3, 2], [nan, nan, nan]"
" -> []"
msgstr "是否删除时序尾部连续的nan值，如果设置为True, 则会自动删除尾部的Nan值"

#: 22130c4eccec41b1b4e52bf834d64ef8 40f917d92e8c4ab88b93708fd277feb6
#: 4df0a8f475954b4389f76bc278a41f98 5576e8c8eb2e48c8a16ad241c6f93274
#: 5e13a60d7a184832814505a1ee80497d of
#: paddlets.datasets.tsdataset.TSDataset.astype:3
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:43
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:42
#: paddlets.datasets.tsdataset.TimeSeries.astype:3
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:16
msgid ""
"Use a numpy.dtype or Python type to cast entire TimeSeries object to the "
"same type. Alternatively, use {col: dtype, …}, where col is a column "
"label and dtype is a numpy.dtype or Python type to cast one or more of "
"the DataFrame’s columns to column-specific types."
msgstr ""
"数据类型，可以是numpy.dtype|Python "
"type或者是dict类型，直接调用df.astype使用，numpy.dtype|Python type代表对所有列做变换， "
"dict代表对某一列或者几列做转换"

#: 9abce01b2fa74d2baf54f2235b277b0a of
#: paddlets.datasets.tsdataset.TimeSeries.load_from_dataframe:21
msgid "TimeSeries object"
msgstr "构建完成的TimeSeries数据"

#: 8c44cc5ef75a43c581ef49dccf56be06 of
#: paddlets.datasets.tsdataset.TimeSeries.time_index:1
msgid "the time index"
msgstr ""

#: 83510389a12541b992bb9857cb6b6cce of
#: paddlets.datasets.tsdataset.TimeSeries.columns:1
msgid "the data columns"
msgstr "数据的列信息"

#: 42dd27c6e9ca49cb9cf4fda2cf376904 of
#: paddlets.datasets.tsdataset.TimeSeries.start_time:1
msgid "the first value of the time index"
msgstr "时序数据中第一个时间点"

#: 640f7add1c554fe0af34655e22a64489 of
#: paddlets.datasets.tsdataset.TimeSeries.end_time:1
msgid "the last value of the time index"
msgstr "时序数据中最后一个时间点"

#: cc9a2d1ec6a545438fadd9d980691640 of
#: paddlets.datasets.tsdataset.TimeSeries.data:1
msgid "DataFrame storing the data"
msgstr "包含的DataFrame类型的成员"

#: a7acdc1239624db190b8a2c897c56765 of
#: paddlets.datasets.tsdataset.TimeSeries.freq:1
msgid "Frequency of TimeSeries"
msgstr "时序频率"

#: d159fcf1062a4f41b51313c5880864c7 of
#: paddlets.datasets.tsdataset.TimeSeries.dtypes:1
msgid "dtypes of TimeSeries"
msgstr "数据类型"

#: 36bc91e22ff949b3a436e134394c2864 of
#: paddlets.datasets.tsdataset.TimeSeries.astype:1
msgid "Cast a TimeSeries object to the specified dtype"
msgstr "转换数据类型，注意这里不会返回一个新的数据，而是在原始数据集上修改"

#: 050dafc819f84d128fa9e21f51335d4c 0ee6eeaef2c446029a1bfee52658c8bf
#: 3c00e84c280244779414b4771a121bce 41bfbb4530ed465385897c03029a394c
#: 44c8e827166542a1ad82aa4c196327e2 54164b7960a2478681b8fb155ba3ffee
#: 63b451ad63dc414783cbcdc54c92d4ea 777565d0dc9743199717f2a2e0713722
#: 7f15c724a17d4b4d8f907191c4404c33 b26f4686c0e24ddcbebd48a5991f7422
#: b50518d5a37746dd90a04ff92d552c93 b9d3533882cc42bbbffbd1bb540f024b
#: bd465a556f94485088fc4d4532eb21a9 c297ac56b8f542b096d6deb80116d87c
#: d64fe4ee13bc4b8a8e9645ffe5e05600 df3c486ef1d94ed89184b7cf7f9e4ef8
#: f4c31d26743d41829922eeb1993cc850 fdc6063a2d3f4eb7be368a2e5c1ab083 of
#: paddlets.datasets.tsdataset.TSDataset.astype
#: paddlets.datasets.tsdataset.TSDataset.concat
#: paddlets.datasets.tsdataset.TSDataset.drop
#: paddlets.datasets.tsdataset.TSDataset.get_item_from_column
#: paddlets.datasets.tsdataset.TSDataset.plot
#: paddlets.datasets.tsdataset.TSDataset.set_column
#: paddlets.datasets.tsdataset.TSDataset.set_feature
#: paddlets.datasets.tsdataset.TSDataset.set_known_cov
#: paddlets.datasets.tsdataset.TSDataset.set_label
#: paddlets.datasets.tsdataset.TSDataset.set_observed_cov
#: paddlets.datasets.tsdataset.TSDataset.set_static_cov
#: paddlets.datasets.tsdataset.TSDataset.set_target
#: paddlets.datasets.tsdataset.TSDataset.split
#: paddlets.datasets.tsdataset.TimeSeries.astype
#: paddlets.datasets.tsdataset.TimeSeries.concat
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point
#: paddlets.datasets.tsdataset.TimeSeries.reindex
#: paddlets.datasets.tsdataset.TimeSeries.split
msgid "Raises"
msgstr ""

#: dd9b588aa14d493894167c3e1506d95f of
#: paddlets.datasets.tsdataset.TimeSeries.to_dataframe:1
msgid "Return a pd.DataFrame representation of the TimeSeries object"
msgstr "TimeSeries转换成DataFrame数据"

#: 8d99d61e857a4fc0aa41f56beb10c61f of
#: paddlets.datasets.tsdataset.TimeSeries.to_dataframe:3
msgid "Return a copy or reference"
msgstr "返回拷贝或者引用"

#: 9673cc4a342f4e1ebfe5ad2efd5b7abd be61b3a059ce4ca4a01de2fa89cc1c71 of
#: paddlets.datasets.tsdataset.TSDataset.to_dataframe:6
#: paddlets.datasets.tsdataset.TimeSeries.to_dataframe:6
msgid "pd.DataFrame"
msgstr ""

#: a467e984a4944e2e9cd834c8934af575 of
#: paddlets.datasets.tsdataset.TimeSeries.to_numpy:1
msgid "Return a numpy.ndarray representation of the TimeSeries object"
msgstr "TimeSeries转换成np.ndarray数据"

#: 68aea3b7b1914aa78564173a5c5393d3 of
#: paddlets.datasets.tsdataset.TimeSeries.to_numpy:3
msgid ""
"Return a copy or reference. Note that copy=False does not ensure that "
"to_numpy() is no-copy. Rather, copy=True ensure that a copy is made, even"
" if not strictly necessary. "
"refer：https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_numpy.html"
msgstr "True代表拷贝数据，False代表不拷贝数据即使设置了False，这里也可能会全量拷贝数据（例如当data中type类型不统一），使用的时候需要注意这里的性能消耗参考：https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_numpy.html"

#: 2b0f566628164839a5fb5b30e6b3729d 89c5bffb8a6f4429b590d97c4440038c of
#: paddlets.datasets.tsdataset.TSDataset.to_numpy:9
#: paddlets.datasets.tsdataset.TimeSeries.to_numpy:9
msgid "np.ndarray"
msgstr ""

#: 5b1a25bfbf7b4a96bef0552846fd5ff0 of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:1
msgid "Convert a point along the time axis into an integer index."
msgstr "将具体的时间点基于time_index转换成具体的index"

#: 5dd6e81b23c64080b2b42b27048760ca of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:3
msgid ""
"Time point, supports 3 types  `pd.Timestamp|str`: It only takes effect "
"when the time_index type is pd.DatatimeIndex, the corresponding index is "
"returned, and str will be forcibly converted to pd.DatatimeIndex  "
"`float`: the parameter will be treated as the proportion of the time "
"series that should lie before the point.  `int`: the parameter will "
"returned as such, provided that it is in the series. Otherwise it will "
"raise a ValueError."
msgstr ""
"时间点，支持三种类型：`pd.Timestamp|str`：只有当time_index类型是pd.DatatimeIndex的时候生效，返回对应的index，str会强制转换成pd.Timestamp；`float`：代表从头开始的比例，0到1之间，如0.8；"
" `int`：直接返回具体的数值，不做转换"

#: e351ca5a888d4cba905078732baff21d of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:3
msgid "Time point, supports 3 types"
msgstr ""

#: ca95e9f5aa2b46a89dcc017a63f952eb of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:5
msgid ""
"`pd.Timestamp|str`: It only takes effect when the time_index type is "
"pd.DatatimeIndex, the corresponding index is returned, and str will be "
"forcibly converted to pd.DatatimeIndex"
msgstr ""

#: 3650eef067224b83bccc753cb117385a of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:7
msgid ""
"`float`: the parameter will be treated as the proportion of the time "
"series that should lie before the point."
msgstr ""

#: 6adcd4fd205548e6b60082d7a10b4a70 of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:9
msgid ""
"`int`: the parameter will returned as such, provided that it is in the "
"series. Otherwise it will raise a ValueError."
msgstr ""

#: 65f781a11ebb4787a1bfdbf707d223a8 of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:11
msgid ""
"If the provided pandas Timestamp is not in the time series index, whether"
" to return the index of the next timestamp or the index of the previous "
"one."
msgstr "如果提供的pandas时间戳不在时间序列索引中，是否返回下一个时间戳或上一个时间戳的索引"

#: f543e750ef76413482343ca7d77554e0 of
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point:15
msgid "index"
msgstr ""

#: 00eeaabdd38340e289929997589799c8 1308b927e88e4c28868e8d732e1b2770
#: 33f87650b54949d98313649c0a8d7154 505794322b2e4ccb80eb3e6ceff9ef3a
#: 530a00855c76451da86215d8c2f581a0 5a65d43650244edc86758f049f14a0eb
#: 6bc259b6d63446b8bd879f576e3bdedb 94b4e2e7e7b840fa86c59cc33f5f2522
#: b574e614e5a44fd282196dafbaed81de d215c75b0afa4494bfbd85927c5b8c19 of
#: paddlets.datasets.tsdataset.TSDataset.columns
#: paddlets.datasets.tsdataset.TSDataset.dtypes
#: paddlets.datasets.tsdataset.TSDataset.get_all_cov
#: paddlets.datasets.tsdataset.TSDataset.get_feature
#: paddlets.datasets.tsdataset.TSDataset.get_known_cov
#: paddlets.datasets.tsdataset.TSDataset.get_label
#: paddlets.datasets.tsdataset.TSDataset.get_observed_cov
#: paddlets.datasets.tsdataset.TSDataset.get_static_cov
#: paddlets.datasets.tsdataset.TSDataset.get_target
#: paddlets.datasets.tsdataset.TimeSeries.get_index_at_point
msgid "Return type"
msgstr ""

#: a7bd9e640b434baabb2df08187cc34b8 of
#: paddlets.datasets.tsdataset.TimeSeries.split:1
msgid ""
"Split the TimeSeries object into two TimeSeries objects according to "
"`split_point`"
msgstr "基于split_point拆分数据"

#: 70dc548ef9664d51bedc4a69c68b8469 of
#: paddlets.datasets.tsdataset.TimeSeries.split:3
msgid ""
"Where to split the TSDataset, which could be  `pd.Timestamp|str`: Only "
"valid when the type of time_index is pd.DatatimeIndex, and str will be "
"forcibly converted to pd.DatatimeIndex  `float`: The proportion of the "
"length of the first TSDataset object  `int`: Only valid when the type of "
"time_index is pd.RangeIndex  If the data of the split_point exists, it "
"will be included in the first TimeSeries object."
msgstr "数据拆分的时间点，支持三种类型：`pd.Timestamp|str`：只有当time_index类型是pd.DatatimeIndex的时候生效，返回对应的index，str会强制转换成pd.Timestamp；`float`：代表第一份数据的拆分比例，0到1之间，如0.8，代表第一份数据占总量的80%，第二份20%；`int`：代表第一份数据的数据量。split_point点的数据如果存在，会包涵在第一份数据中"

#: 91f5359ccd1f4eab9b5337d65fbf9634 aea9f65621614f0bac583edfb485f068 of
#: paddlets.datasets.tsdataset.TSDataset.split:3
#: paddlets.datasets.tsdataset.TimeSeries.split:3
msgid "Where to split the TSDataset, which could be"
msgstr ""

#: 3682ba8639c24c299873c1c80b558dc0 d063e9bb3e0346c3a3033717a3cd60a3 of
#: paddlets.datasets.tsdataset.TSDataset.split:5
#: paddlets.datasets.tsdataset.TimeSeries.split:5
msgid ""
"`pd.Timestamp|str`: Only valid when the type of time_index is "
"pd.DatatimeIndex, and str will be forcibly converted to pd.DatatimeIndex"
msgstr ""

#: b749958ff4984b5fa4e976223b6bb035 c71af0ff5d844fc0b75ea4101198ee40 of
#: paddlets.datasets.tsdataset.TSDataset.split:7
#: paddlets.datasets.tsdataset.TimeSeries.split:7
msgid "`float`: The proportion of the length of the first TSDataset object"
msgstr ""

#: 49c1544f068c4c279306c9b391fa1c22 f30469793e6a4502a86849e47322ecfb of
#: paddlets.datasets.tsdataset.TSDataset.split:9
#: paddlets.datasets.tsdataset.TimeSeries.split:9
msgid "`int`: Only valid when the type of time_index is pd.RangeIndex"
msgstr ""

#: 70093de43ae342b38e6a3a258531dc51 of
#: paddlets.datasets.tsdataset.TimeSeries.split:11
msgid ""
"If the data of the split_point exists, it will be included in the first "
"TimeSeries object."
msgstr ""

#: b84fd86187e64e5c91f47fb5b8404143 of
#: paddlets.datasets.tsdataset.TimeSeries.split:13
msgid ""
"If `split_point` (pd.TimeSeries) doesn't exist in the time index, use the"
" next valid index (True) or the previous one (False)"
msgstr "如果提供的pandas时间戳不在时间序列索引中，是否返回下一个时间戳或上一个时间戳的索引"

#: 3061661fadac425e9ab3882ddb258a16 of
#: paddlets.datasets.tsdataset.TimeSeries.split:16
msgid "Tuple[\"TimeSeries\", \"TimeSeries\"]"
msgstr ""

#: e6658041efd74bc1af1337bde114d08c of
#: paddlets.datasets.tsdataset.TimeSeries.copy:1
msgid "Make a copy of the TimeSeries object"
msgstr "返回一份拷贝的数据"

#: 0a1d4e76b67e45eb990d633f29c34a81 9ebedff0c9ff4620817ec69f7ed635b8
#: bf1ed01ce73946f98d7a5edf3a4dd84f e1fa2b5bd5b74f96a72bc3060cfa7969 of
#: paddlets.datasets.tsdataset.TimeSeries.concat:15
#: paddlets.datasets.tsdataset.TimeSeries.copy:3
#: paddlets.datasets.tsdataset.TimeSeries.load_from_json:7
#: paddlets.datasets.tsdataset.TimeSeries.reindex:9
msgid "TimeSeries"
msgstr ""

#: 632e886fc6be439ea91a28ae99270d73 of
#: paddlets.datasets.tsdataset.TimeSeries.concat:1
msgid "Concatenate a list of TimeSeries objects along the specified axis"
msgstr "基于axis维度实现TimeSeries对象的连接"

#: 31b000eb527b4343a1903d806162f226 of
#: paddlets.datasets.tsdataset.TimeSeries.concat:3
msgid ""
"A list of TimeSeries objects All TimeSeries' freqs are required to be "
"consistent. When axis=1, time_col is required to be non-repetitive; when "
"axis=0, all columns are required to be non-repetitive"
msgstr ""
"TimeSeries元素列表，要求所有TimeSeries "
"freq保持一致，当axis=1的时候，要求time_col不重复；axis=0的时候，要求所有columns不重复"

#: 18667d0413824341951823d281be60b5 80a14c539df3482793db0ccbc6ddec05 of
#: paddlets.datasets.tsdataset.TSDataset.concat:8
#: paddlets.datasets.tsdataset.TimeSeries.concat:8
msgid "The axis along which to concatenate the TimeSeries objects"
msgstr "合并的维度，1是横向合并，0代表纵向合并"

#: 1cab07702f9d4d69aaa71b12a2f21293 3e961361f8534ef8893ba50912166803 of
#: paddlets.datasets.tsdataset.TSDataset.concat:10
#: paddlets.datasets.tsdataset.TimeSeries.concat:10
msgid "Drop duplicate indices."
msgstr "是否对重复index的行进行删除，默认删除"

#: 96950bd9644c464ab72d5dce8e0f14fc a7c7479a13814609bd830a6d14fcf487 of
#: paddlets.datasets.tsdataset.TSDataset.concat:12
#: paddlets.datasets.tsdataset.TimeSeries.concat:12
msgid "keep 'first' or 'last' when drop duplicates."
msgstr "当对concat的时序数据有重复index并设置删除，保留第一个或者最后一个重复时序的数据"

#: ac721bc0eb6f4c3db25067160bb8f953 of
#: paddlets.datasets.tsdataset.TimeSeries.reindex:1
msgid "Reindex the TimeSeries object with optional filling logic"
msgstr "对TimeSeries进行reindex"

#: 0d127ad2d690415bb866cf089e803a12 of
#: paddlets.datasets.tsdataset.TimeSeries.reindex:3
msgid ""
"array-like, new index to conform. Preferably an Index object to avoid "
"duplicating data."
msgstr "array-like类型，重新设定的index，要求不能重复"

#: aaabf238189c4c0c83801ae4a890b062 of
#: paddlets.datasets.tsdataset.TimeSeries.reindex:5
msgid ""
"Value to use for missing values. NaN by default, but can be any "
"“compatible” value."
msgstr "用于填充缺失点的值"

#: 94d475da54934c0eb2f3fd564840bec1 ef3bd8bf8b314d4e819d0d11d1f13200 of
#: paddlets.datasets.tsdataset.TimeSeries.reindex:6
#: paddlets.datasets.tsdataset.TimeSeries.reindex:7
msgid "Optional arguments passed to `DataFrame.reindex`"
msgstr "其他传递给`DataFrame.reindex`的可选参数"

#: e4c9b3b3b9b245d8b9398455c165738f of
#: paddlets.datasets.tsdataset.TimeSeries.sort_columns:1
msgid "Sort the TimeSeries object by the index"
msgstr "对data的columns进行排序"

#: d1ed1207dd2b458bbfdb4bb649af7f80 of
#: paddlets.datasets.tsdataset.TimeSeries.sort_columns:3
msgid ""
"Sort ascending or descending. When the index is a MultiIndex the sort "
"direction can be controlled for each level individually."
msgstr "升序或降序排序"

#: ba5fb8a5e1654d5a958ddc3a962f5082 of
#: paddlets.datasets.tsdataset.TimeSeries.drop_tail_nan:1
msgid "Drop trailing consecutive Nan values"
msgstr ""

#: 0b3fd1e0cf09440aa047defba1fe078a of
#: paddlets.datasets.tsdataset.TimeSeries.to_json:1
msgid "Return a str json representation of the TimeSeries object."
msgstr "TimeSeries转换成json数据"

#: 3305a866d0d9446a994b801fbf1d0c27 53465d9e071b4d5ba5dcf5213bcbacf7 of
#: paddlets.datasets.tsdataset.TSDataset.to_json:3
#: paddlets.datasets.tsdataset.TimeSeries.to_json:3
msgid "str"
msgstr ""

#: 11dbb1689eeb49fda49c29c50e23ff52 of
#: paddlets.datasets.tsdataset.TimeSeries.load_from_json:1
msgid "Construct a TimeSeries object from a str json_data"
msgstr "基于CSV文件构建完整TSDataset"

#: ddfa20254a1344e3855fbef91ec57352 e349c190f16f4f77a8566dafc1811f40 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_json:3
#: paddlets.datasets.tsdataset.TimeSeries.load_from_json:3
msgid "json object from which to load data"
msgstr "panas.DataFrame数据对象"

#: 3432c83422484cacbd7e44f561005c5e 447d8789e3a54ac1afaf6b9d965be82e of
#: paddlets.datasets.tsdataset.TSDataset.load_from_json:5
#: paddlets.datasets.tsdataset.TimeSeries.load_from_json:5
msgid "Optional arguments passed to `json.loads` function"
msgstr "传json.loads()的可选参数"

#: 02aaad3afbd549baa51b4479ed81a86d f252a834eddf43ffbd62afcbac6a68af of
#: paddlets.datasets.tsdataset.TSDataset.to_categorical:1
#: paddlets.datasets.tsdataset.TimeSeries.to_categorical:1
msgid "Modify col's type to int as categorical."
msgstr "将对应列的属性修改成分类类型的数据，也就是int类型，等同于astype(np.int64)"

#: 39066acfa0a54e44aa9e7f2180bd9190 415f6665bd684829925be3113d9d7b5e
#: 46f971c1fec848b792db8bf79120c68d e776a466ae924b78ba0ed819eb182444 of
#: paddlets.datasets.tsdataset.TSDataset.to_categorical:3
#: paddlets.datasets.tsdataset.TSDataset.to_numeric:3
#: paddlets.datasets.tsdataset.TimeSeries.to_categorical:3
#: paddlets.datasets.tsdataset.TimeSeries.to_numeric:3
msgid "col names in ts"
msgstr "column名称"

#: 95e7a7dc875b456ab1f2af6dd28b0487 dca3567e9f39473dbc2e321f65d74148 of
#: paddlets.datasets.tsdataset.TSDataset.to_numeric:1
#: paddlets.datasets.tsdataset.TimeSeries.to_numeric:1
msgid "Modify col's type to float as numeric."
msgstr "将对应列的属性修改成数值类型的数据，也就是float类型，等同于astype(np.float32)"

#: 9241baff164946daae95a9530a83ef94 of paddlets.datasets.tsdataset.TSDataset:27
msgid "Target"
msgstr "代表预测目标列，可能包涵多个预测目标"

#: a0e6b23400c04678980f6910f8a16a0f of paddlets.datasets.tsdataset.TSDataset:29
msgid "Observed covariates"
msgstr "代表观测协变量"

#: db20d5a082034bc0b254c29c7921c758 of paddlets.datasets.tsdataset.TSDataset:31
msgid "Known covariates"
msgstr "代表已知协变量"

#: 2fc20dc6cbfd430aba88344dd76688a6 of paddlets.datasets.tsdataset.TSDataset:33
msgid "Static covariates"
msgstr "静态协变量"

#: 28914fe6ee534d65860c17cf6bfe11d2 495f9043970a40598ef1ad56082603d1
#: 8dedf84dba1242ef8f1d8ee3ed4ed345 of paddlets.datasets.tsdataset.TSDataset:35
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:28
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:27
msgid "Fill missing dates or not"
msgstr "是否进行缺失值填充"

#: 9cbc7fac43bf48198a6f80302b82aa26 badfa38a3cc14d969dac0e5d91479180 of
#: paddlets.datasets.tsdataset.TSDataset:37
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:29
msgid ""
"Method of filling missing values. Totally 7 methods are supported "
"currently: max: Use the max value in the sliding window min: Use the min "
"value in the sliding window avg: Use the mean value in the sliding window"
" median:  Use the median value in the sliding window pre: Use the "
"previous value back: Use the next value zero:  Use 0s"
msgstr ""
"默认为pre前项补全。共有7种补全数据缺失值的方法，包括:max: 使用局部窗口最大值补全缺失值信息。min: "
"使用局部窗口最小值补全缺失值信息。avg: 使用局部窗口均值补全缺失值信息。median: 使用局部窗口中位数数值补全缺失值信息。pre: "
"使用前向数据补全数据信息。back: 使用后项数据补全数据信息。zero: 使用0值补全数据信息"

#: b460e42dadd746a1a8dcff8ebd43f099 c358a18c3a154f8aa787452fac60c02d
#: c3bcce9fa9b041d8a580d5541b339371 of paddlets.datasets.tsdataset.TSDataset:46
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:39
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:38
msgid "Size of the sliding window"
msgstr "局部窗口长度，默认为10"

#: c74dfbc041e14aefa8870101ef1c8c78 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:1
msgid "Construct a TSDataset object from a csv file"
msgstr "基于CSV文件构建TSDataset"

#: a65cd8935631430f941024974ffaa615 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:3
msgid ""
"The path to the CSV file, or the file object; consistent with the "
"argument of `pandas.read_csv` function"
msgstr "csv文件或者文件对象地址, 通过`pandas.read_csv` 方法的构建"

#: 83abe3d3865046bb99a58731d1abe8e8 a23bab07ccfa475fa185081d0d4e1546 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:6
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:5
msgid ""
"The column name identifying a time series. This means that the group_id "
"identify a sample together with the `time_index`. If you have only one "
"timeseries dataset, Do not pass this parameter or set this to the name of"
" column that is constant. If group_id is provided, the function will "
"return a list of TSDataset which length equal to len(group_id.unique()). "
"eg: A sample of equipment load detection guarantees the data of multiple "
"equipment, in which the `ID` column is used to distinguish different "
"equipment. In this case, the group_id='ID'."
msgstr ""
"用于区分不同组的时序数据集，如果只有一个时序数据集，请不要传递此参数或将其设置为常量列的名称。"
"如果提供了group_id，函数将返回长度等于len(group_id.unique())的TSDataset列表。"
"例如：设备负载检测样本文件中包含了多个设备的数据，其中ID列用于区分不同的设备。在这种情况下，设置group_id=ID。"

#: 10748597583843d6a227eebe141c58c3 664b135fd14146a7b4e433a5f187381b of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:12
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:11
msgid "The name of time column"
msgstr "时间列，可以是DatetimeIndex或者RangeIndex类型，如果为None，将index作为时间列"

#: 16f6406fe5ee493fb6d06f892fd564b5 b08a34c685cd4b2da628bde9c995dab1 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:14
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:13
msgid "The names of columns for target"
msgstr "代表已知协变量列名"

#: 2f85c43e5323405abed4f4f5b00a8dc2 f6a03864f5a846c29792a107f0df4d36 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:16
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:15
msgid "The names of columns for label in anomaly detection"
msgstr "静态协变量列名，需要同一列中全部数值一致"

#: 7aa7085c0bf948b9a535333bac02ca03 8e95a04922f34e08b26e32534cdd2c16 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:18
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:17
msgid "The names of columns for observed covariates"
msgstr "代表观测协变量列名"

#: 37551ee3e094495ab5614aa6b18e9575 40471188028445a28c41e4cf9f262f5c of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:20
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:19
msgid "The names of columns for feature in anomaly detection"
msgstr "静态协变量列名，需要同一列中全部数值一致"

#: 0dd54411347c4216b3097198550f5461 b90dab577c564543afce5d5a0c97ac85 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:22
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:21
msgid "The names of columns for konwn covariates"
msgstr "代表已知协变量列名"

#: 5fa8c93574944511b2e062479088e4fe 8d658f0febb84cd2875b19899aa311c8 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:24
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:23
msgid "The names of columns for static covariates"
msgstr "静态协变量列名，需要同一列中全部数值一致"

#: 2451e7f554054b86b5584babe9cd1b3c 9c82c11bd3a94877ad365e3d3b75040e of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:26
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:25
msgid ""
"A str or int representing the DateTimeIndex's frequency or RangeIndex's "
"step size"
msgstr "样本数据频率，用于调整data以及配合fillna进行空行填充"

#: f9ee29810e3145a8bf6887e7eb4e3709 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:30
msgid ""
"Method of filling missing values. Totally 7 methods are supported "
"currently: max: Use the max value in the sliding window min: Use the min "
"value in the sliding window avg: Use the mean value in the sliding window"
" median:  Use the median value in the sliding window pre: Use the "
"previous value back: Use the next value zero:  Use 0"
msgstr ""
"默认为pre前项补全。共有7种补全数据缺失值的方法，包括:max: 使用局部窗口最大值补全缺失值信息。min: "
"使用局部窗口最小值补全缺失值信息。avg: 使用局部窗口均值补全缺失值信息。median: 使用局部窗口中位数数值补全缺失值信息。pre: "
"使用前向数据补全数据信息。back: 使用后项数据补全数据信息。zero: 使用0值补全数据信息"

#: 42ab4f894c2e44e5a681a47b281933a1 e37aaa66032d4afa8361ec7d85031671 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:41
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:40
msgid "Drop time series tail nan value or not"
msgstr "是否删除时序尾部连续的nan值，如果设置为True, 则会自动删除尾部的Nan值"

#: 822f7571b9b548918c724caea714954c of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:47
msgid "Optional arguments passed to `pandas.read_csv`"
msgstr "传递给 `pandas.read_csv` 方法的可选参数"

#: 4c56fe64bdd84de38db449f17a082ca5 7cacb6611dfc41cbb95bfadd48cf8cda of
#: paddlets.datasets.tsdataset.TSDataset.load_from_csv:49
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:47
msgid "Union[TSDataset, List[TSDataset]]"
msgstr ""

#: f6745f7b4f2945d585173c07bb2e854a of
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:1
msgid "Construct a TSDataset object from a DataFrame"
msgstr "基于CSV文件构建完整TSDataset"

#: 9885952538b94a68b6b2d0dc4011800c of
#: paddlets.datasets.tsdataset.TSDataset.load_from_dataframe:3
msgid "panas.DataFrame object from which to load data"
msgstr "panas.DataFrame数据对象"

#: f5c574244a6b42259442955e48700025 of
#: paddlets.datasets.tsdataset.TSDataset.to_dataframe:1
msgid "Return a pd.DataFrame representation of the TSDataset object"
msgstr "TSDataset转换成DataFrame数据"

#: 7571e345bcac42dfa88cef3b11879f49 of
#: paddlets.datasets.tsdataset.TSDataset.to_dataframe:3
msgid "Return a copy of or a reference to the underlying DataFrame objects"
msgstr "True代表拷贝数据，False代表不拷贝数据，注意这里是浅拷贝，对于数序数据而言通常没有问题"

#: 977d4cf312174960abb545a7313250a3 of
#: paddlets.datasets.tsdataset.TSDataset.to_numpy:1
msgid "Return a np.ndarray representation of the TSDataset object"
msgstr "TSDataset转换成np.ndarray数据"

#: 3a6c16e44098473fb3892c75360f65ce of
#: paddlets.datasets.tsdataset.TSDataset.to_numpy:3
msgid ""
"Return a copy of or a reference to the underlying DataFrame objects, Note"
" that copy=False does not ensure that to_numpy() is no-copy. Rather, "
"copy=True ensures that a copy is made, even if not strictly necessary. "
"refer：https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_numpy.html"
msgstr "True代表拷贝数据，False代表不拷贝数据即使设置了False，这里也可能会全量拷贝数据（例如当data中type类型不统一），使用的时候需要注意这里的性能消耗参考：https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_numpy.html"

#: 16344276e187415f94303376c4febca5 a9be0ce7367d43b4974b58a1e784808f of
#: paddlets.datasets.tsdataset.TSDataset.get_label:1
#: paddlets.datasets.tsdataset.TSDataset.get_target:1
msgid "target"
msgstr ""

#: bc438bae510c483abb816ab65cf3bd7d eae441f2be72482b949370e2a85c149e of
#: paddlets.datasets.tsdataset.TSDataset.get_feature:1
#: paddlets.datasets.tsdataset.TSDataset.get_observed_cov:1
msgid "observed_cov"
msgstr ""

#: b06c890e6e5d49df89f2d6aadb0ad670 of
#: paddlets.datasets.tsdataset.TSDataset.get_known_cov:1
msgid "known_cov"
msgstr ""

#: 4352b862e6df4d80b700adf3c9b4d777 of
#: paddlets.datasets.tsdataset.TSDataset.get_static_cov:1
msgid "static_cov"
msgstr ""

#: e241f1bc11104c2f9b31834aeb3553ac of
#: paddlets.datasets.tsdataset.TSDataset.get_all_cov:1
msgid "Merge observed_cov and konw_cov"
msgstr "融合了observed_cov以及konw_cov的数据"

#: 56db1bc11c3c45539e220083c4deaa73 of
#: paddlets.datasets.tsdataset.TSDataset.set_target:1
msgid "New target"
msgstr ""

#: 3617543c2404408b834e34d454155a05 of
#: paddlets.datasets.tsdataset.TSDataset.set_label:1
msgid "New label"
msgstr ""

#: b91d2d3e213d49a5ae54deb6e61d511a of
#: paddlets.datasets.tsdataset.TSDataset.set_observed_cov:1
msgid "New observed_cov"
msgstr ""

#: cdd8083e07024de188ff5f8fe2238b02 of
#: paddlets.datasets.tsdataset.TSDataset.set_feature:1
msgid "New feature"
msgstr ""

#: e354039f0ca34cd6a153c97b83c9efcd of
#: paddlets.datasets.tsdataset.TSDataset.set_known_cov:1
msgid "New known_cov"
msgstr ""

#: 0417ef1dbea542bd87137a6c91561703 of
#: paddlets.datasets.tsdataset.TSDataset.set_static_cov:1
msgid "New static_cov"
msgstr ""

#: 40342a1377aa4062a29d5089365c8279 of
#: paddlets.datasets.tsdataset.TSDataset.set_static_cov:3
msgid "Append to the existing static_cov or replace the existing satic_cov"
msgstr "True代表在原有static_cov基础上添加，False代表直接全部替换原有的static_cov"

#: 7e858195563e490e9c9796297ec0092e 9ea6b8685e514188ae517a6f8b052c9e of
#: paddlets.datasets.tsdataset.TSDataset.label:1
#: paddlets.datasets.tsdataset.TSDataset.target:1
msgid "Returns: TimeSeries|None: target"
msgstr ""

#: 557552a4af984f85ac662ec51a771ee5 673e89b88d0342a4add3557ba755bc41 of
#: paddlets.datasets.tsdataset.TSDataset.feature:1
#: paddlets.datasets.tsdataset.TSDataset.observed_cov:1
msgid "Returns: TimeSeries|None: observed_cov"
msgstr ""

#: 85705be451c247cd85b98b30d52441a4 of
#: paddlets.datasets.tsdataset.TSDataset.known_cov:1
msgid "Returns: TimeSeries|None: known_cov"
msgstr ""

#: 23d8c71dd51f4a21a02d9684eb527303 of
#: paddlets.datasets.tsdataset.TSDataset.static_cov:1
msgid "Returns: dict|None: static_cov"
msgstr ""

#: 6d6e6374a0314e5998d94b745cba90a1 of
#: paddlets.datasets.tsdataset.TSDataset.split:1
msgid ""
"Splits the TSDataset object into two TSDataset objects according to "
"`split_point`, only valid when `self._target` is not None"
msgstr "基于split_point拆分数据, 仅当self._target不为None的时候生效"

#: 2641d7ccaf4a4c9fbe05e762775e3686 of
#: paddlets.datasets.tsdataset.TSDataset.split:3
msgid ""
"Where to split the TSDataset, which could be  `pd.Timestamp|str`: Only "
"valid when the type of time_index is pd.DatatimeIndex, and str will be "
"forcibly converted to pd.DatatimeIndex  `float`: The proportion of the "
"length of the first TSDataset object  `int`: Only valid when the type of "
"time_index is pd.RangeIndex  If the data of the split_point exists, it "
"will be included in the first data"
msgstr "数据拆分的时间点，支持三种类型：`pd.Timestamp|str`：只有当time_index类型是pd.DatatimeIndex的时候生效，返回对应的index，str会强制转换成pd.Timestamp；`float`：代表第一份数据的拆分比例，0到1之间，如0.8，代表第一份数据占总量的80%，第二份20%；`int`：代表第一份数据的数据量。split_point点的数据如果存在，会包涵在第一份数据中"

#: 6cdc943f30ec40d7a56525b5987b6f99 of
#: paddlets.datasets.tsdataset.TSDataset.split:11
msgid ""
"If the data of the split_point exists, it will be included in the first "
"data"
msgstr ""

#: 6c36eaf73f47497d82282631cafce300 of
#: paddlets.datasets.tsdataset.TSDataset.split:13
msgid ""
"If `split_point` (pd.TimeSeries) doesn't exist in the time column, use "
"the next valid index (True) or the previous one (False)"
msgstr "如果提供的pandas时间戳不在时间序列索引中，是否返回下一个时间戳或上一个时间戳的索引"

#: 23dc1716323946a09a670b96b80535ef of
#: paddlets.datasets.tsdataset.TSDataset.split:17
msgid "Tuple[\"TSDataset\", \"TSDataset\"]"
msgstr ""

#: 7054697911294f9a822fee52748a80bc of
#: paddlets.datasets.tsdataset.TSDataset.get_item_from_column:1
msgid ""
"Get the underlying TimeSeries object for targets, observed covariates, "
"and know covariates, or the dict for static_covs according to the column "
"name"
msgstr "基于column名称返回其对应的类型的结合，包括target, observed_cov, known_cov, static_cov"

#: 101121e448f24ce29aa01bb7170fe735 61ea283765434099adf130111aa80511 of
#: paddlets.datasets.tsdataset.TSDataset.get_item_from_column:3
#: paddlets.datasets.tsdataset.TSDataset.set_column:3
msgid "column name"
msgstr "column名称"

#: 94dac8f23ac943c79929346dcc185393 of
#: paddlets.datasets.tsdataset.TSDataset.get_item_from_column:6
msgid "Union[\"TimeSeries\", dict]"
msgstr ""

#: e3b0c42deb9e4a89860ea84ee33fc443 of
#: paddlets.datasets.tsdataset.TSDataset.set_column:1
msgid "Add a new column or update the existing column"
msgstr "设置某列columns的列元素, 支持新增和修改"

#: df8995a1b0e046dca9ffb7e98b766751 of
#: paddlets.datasets.tsdataset.TSDataset.set_column:5
msgid ""
"New column values. When value=pd.Series, its index must be same as the "
"index of the TSDataset object. When type='static_cov', value can only be "
"int or str."
msgstr "columns列内容，其index必须和目标属性的index相同，仅仅当columns是static_cov类型的时候，value才可以是int或者str"

#: 3ed07205ffec4e1095eca1cb521ec36e of
#: paddlets.datasets.tsdataset.TSDataset.set_column:8
msgid ""
"Only effective when adding a new column, where to put the new column. By "
"default, the new column will be added to known_cov."
msgstr ""
"设置的column类型，仅当新增的时候起作用，默认新增是known_cov类型，类型是target，known_cov, "
"observed_cov, static_cov"

#: 86721fb4676a40779d1773247836923a of
#: paddlets.datasets.tsdataset.TSDataset.drop:1
msgid "Drop column or columns"
msgstr "删除columns的列元素"

#: fbd15db397164bd5b33a7c853813b817 of
#: paddlets.datasets.tsdataset.TSDataset.drop:3
msgid "Column name or column names"
msgstr "columns名称"

#: f5657dcb6fba45d3a6f0ce012036940b of
#: paddlets.datasets.tsdataset.TSDataset.plot:1
msgid "plot function, a wrapper for Dataframe.plot()"
msgstr "画图函数,对Dataframe.plot()的包装"

#: d4dc8cfb4b33479bb3f71374bbe18376 of
#: paddlets.datasets.tsdataset.TSDataset.plot:3
msgid ""
"The names of columns to be plot. When columns is None, the targets will "
"be plot by default."
msgstr "指定打印的columns名称, columns为None时默认打印target"

#: e1771e1890d041ec99e2cabe26ce0a79 of
#: paddlets.datasets.tsdataset.TSDataset.plot:6
msgid "Add data for joint plotprinting, the default is None"
msgstr "添加数据进行联合打印, 默认为None"

#: 82574b2837784ea5b4c6c29025648f96 of
#: paddlets.datasets.tsdataset.TSDataset.plot:8
msgid "Custom labels, length should be equal to nums of added datasets."
msgstr "为添加数据增加自定义标签，自定义标签的长度应该等于添加数据的数量"

#: c00d69831ee14a7095ef93b512f82206 of
#: paddlets.datasets.tsdataset.TSDataset.plot:10
msgid ""
"The quantile (between 0 and 1) to plot as a \"central\" value, For "
"instance, setting `central_quantile=0.5` will plot the median of each "
"component.  (only used when dataset is probability forecasting output )"
msgstr "中心分位- 概率区间的中心点，默认为0.5分位。（此参数只会在概率预测结果打印中用到）"

#: fb4a85b5c1c7407e8c711432422379ce of
#: paddlets.datasets.tsdataset.TSDataset.plot:13
msgid ""
"The quantile to use for the lower bound of the plotted confidence "
"interval. Similar to `central_quantile`, this is applied to each "
"component separately (i.e., displaying marginal distributions). No "
"confidence interval is shown if `confidence_low_quantile` is None "
"(default 0.05). (only used when dataset is probability forecasting output"
" )"
msgstr "低分位- 概率区间的下界，默认为0.05分位。（此参数只会在概率预测结果打印中用到）"

#: d7dca5b18a774be19958feb4df41a6b6 of
#: paddlets.datasets.tsdataset.TSDataset.plot:17
msgid ""
"The quantile to use for the upper bound of the plotted confidence "
"interval. Similar to `central_quantile`, this is applied to each "
"component separately (i.e., displaying marginal distributions). No "
"confidence interval is shown if `high_quantile` is None (default 0.95). "
"(only used when dataset is probability forecasting output )"
msgstr "高分位- 概率区间的上界，默认为0.95分位。（此参数只会在概率预测结果打印中用到）"

#: 06aac0bdf4b84e11b9fa452f1a694693 of
#: paddlets.datasets.tsdataset.TSDataset.plot:21
msgid "Optional arguments passed to `Dataframe.plot` function"
msgstr "传入Dataframe.plot()的可选参数"

#: 333c0f50bd74401daa6e2b93debda045 of
#: paddlets.datasets.tsdataset.TSDataset.plot:23
msgid "matplotlib.pyplot object"
msgstr ""

#: 80befa67e6974fef8689802ede33c7e9 of
#: paddlets.datasets.tsdataset.TSDataset.copy:1
msgid "Make a copy of the TSDataset object"
msgstr "返回一份拷贝的数据"

#: 43a1ccb757b2494fb2e0c812b89ae50f d4536859d75f42f5a30fde0342ed6f20
#: d685ed80ffbb4c75b1d7422a41c9bd62 deacc5faa32048bfb4391de3953c12e9 of
#: paddlets.datasets.tsdataset.TSDataset.concat:15
#: paddlets.datasets.tsdataset.TSDataset.copy:3
#: paddlets.datasets.tsdataset.TSDataset.load:6
#: paddlets.datasets.tsdataset.TSDataset.load_from_json:7
msgid "TSDataset"
msgstr ""

#: 7d33b4e3e81949b0981e1b585d0ae5af of
#: paddlets.datasets.tsdataset.TSDataset.save:1
msgid "Save TSDataset object to a file"
msgstr "保存对象到文件"

#: 47122c0b4f60496082e5b8b375c31911 88cedeb3fbe74332a7eb355c57526426 of
#: paddlets.datasets.tsdataset.TSDataset.load:3
#: paddlets.datasets.tsdataset.TSDataset.save:3
msgid "file path"
msgstr "文件路径"

#: 9fbbaf4010ab47e0ad6df4bffada274d of
#: paddlets.datasets.tsdataset.TSDataset.load:1
msgid "Load TSDataset from the saved file"
msgstr "从文件中获取对象"

#: fdd0a316fcc94f0086f0c076e3bdc906 of
#: paddlets.datasets.tsdataset.TSDataset.to_json:1
msgid "Return a str json representation of the TSDataset object."
msgstr "TSDataset转换成json数据"

#: 93c2c3e1698f46be99c0b5370d3ce954 of
#: paddlets.datasets.tsdataset.TSDataset.load_from_json:1
msgid "Construct a TSDataset object from a str json_data"
msgstr "基于CSV文件构建完整TSDataset"

#: 6d5e1e09ad7943fcb5075c3deb473cbc of
#: paddlets.datasets.tsdataset.TSDataset.columns:1
msgid "return all columns(except static columns)"
msgstr "返回所有列名（除static外）"

#: 58cbcda670ab4736972494cae599dd03 of
#: paddlets.datasets.tsdataset.TSDataset.columns:3
msgid ""
"The key is the column name, and the value is the type, including target, "
"known_cov, and observed_cov"
msgstr "key是columns名称，value是类型，包括target, known_cov, observed_cov"

#: cbb4dbfe22734ae1b4d4fb9a9472da1a of
#: paddlets.datasets.tsdataset.TSDataset.freq:1
msgid "Frequency of TSDataset"
msgstr "TSDataset数据频率"

#: 9b547b7aaf6b40c09745f44d4eb579a3 of
#: paddlets.datasets.tsdataset.TSDataset.concat:1
msgid "Concatenate a list of TSDataset objects along the specified axis"
msgstr "用于合并两个数据集，target、known_cov以及observe_cov按照df规则合并，static按照dict合并"

#: 96569eeb74ec4637b0f802b929284055 of
#: paddlets.datasets.tsdataset.TSDataset.concat:3
msgid ""
"A list of TSDataset objects. All TSDatasets' freqs are required to be "
"consistent. When axis=1, time_col is required to be non-repetitive; when "
"axis=0, all columns are required to be non-repetitive"
msgstr ""
"TSDataset元素列表，要求所有TSDataset "
"freq保持一致，当axis=1的时候，要求time_col不重复；axis=0的时候，要求所有columns不重复"

#: 339929e9080d4317a354f662da2cf60b of
#: paddlets.datasets.tsdataset.TSDataset.astype:1
msgid "Cast a TSDataset object to the specified dtype"
msgstr "转换数据类型，注意这里不会返回一个新的数据，而是在原始数据集上修改"

#: e1026c1ce7fc49ffa4d817b8d036dc5b of
#: paddlets.datasets.tsdataset.TSDataset.dtypes:1
msgid "Get dtypes of target, known_covs, observed_covs"
msgstr "返回列类型"

#: 154509ca91c34b97bd94ca757ae17072 of
#: paddlets.datasets.tsdataset.TSDataset.dtypes:3
msgid "<column name, dtype>"
msgstr ""

#: 38c63b7d28034f51b94ae085bed72b90 of
#: paddlets.datasets.tsdataset.TSDataset.sort_columns:1
msgid "Sort the TSDataset object by the index"
msgstr "对所有元素的columns进行分别排序"

#: 62437078de3a4c14af6a9b2cbfbbd3e9 of
#: paddlets.datasets.tsdataset.TSDataset.sort_columns:3
msgid ""
"Ascending or descending. When the index is a MultiIndex the sort "
"direction can be controlled for each level individually."
msgstr "升序或降序排序"

